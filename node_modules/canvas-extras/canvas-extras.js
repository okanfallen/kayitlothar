const Canvas = require('canvas');

Canvas.CanvasRenderingContext2D.prototype.roundRect = function(x,y, width, height, roundness) {
    const halfradians = (2 * Math.PI) / 2;
    const quarterradians = (2 * Math.PI) /4
    this.arc(roundness + x, roundness + y, roundness, -quarterradians, halfradians, true)
    this.lineTo(x, y + height - roundness);
    this.arc(roundness + x, height - roundness + y, roundness, halfradians, quarterradians, true);
    this.lineTo(x + width - roundness, y + height);
    this.arc(x + width - roundness, y + height - roundness, roundness, quarterradians, 0, true);
    this.lineTo(x + width, y + roundness);
    this.arc(x + width - roundness, y + roundness, roundness, 0, -quarterradians, true);
    this.lineTo(x + roundness, y);
}

Canvas.CanvasRenderingContext2D.prototype.stadium = function(x,y, width, height) {
    var radius = height/2;
    const halfradians = (2 * Math.PI) / 2;
    const quarterradians = (2 * Math.PI) /4
    this.arc(radius + x, radius + y, radius, -quarterradians, halfradians, true)
    this.lineTo(x, y + height - radius);
    this.arc(radius + x, height - radius + y, radius, halfradians, quarterradians, true);
    this.lineTo(x + width - radius, y + height);
    this.arc(x + width - radius, y + height - radius, radius, quarterradians, 0, true);
    this.lineTo(x + width, y + radius);
    this.arc(x + width - radius, y + radius, radius, 0, -quarterradians, true);
    this.lineTo(x + radius, y);
}

Canvas.CanvasRenderingContext2D.prototype.progressBar = function(currentProgress, maxProgress, x, y, width, height, barFillColor, emptyFillColor, text) {
    this.save();
    this.beginPath();
    if (!emptyFillColor) emptyFillColor = 'black';
    if (!barFillColor) barFillColor = 'white';
    var radius = height/2;
    const halfradians = (2 * Math.PI) / 2;
    const quarterradians = (2 * Math.PI) /4
    this.arc(radius + x, radius + y, radius, -quarterradians, halfradians, true)
    this.lineTo(x, y + height - radius);
    this.arc(radius + x, height - radius + y, radius, halfradians, quarterradians, true);
    this.lineTo(x + width - radius, y + height);
    this.arc(x + width - radius, y + height - radius, radius, quarterradians, 0, true);
    this.lineTo(x + width, y + radius);
    this.arc(x + width - radius, y + radius, radius, 0, -quarterradians, true);
    this.lineTo(x + radius, y);
    this.fillStyle = emptyFillColor;
    this.fill();
    this.stroke();
    this.closePath();
    this.clip();
    var calculateprogress = ((currentProgress / maxProgress) * width)+(x-width);
    var tst = calculateprogress;
    this.beginPath();
    this.arc(radius + tst, radius + y, radius, -quarterradians, halfradians, true)
    this.lineTo(tst, y + height - radius);
    this.arc(radius + tst, height - radius + y, radius, halfradians, quarterradians, true);
    this.lineTo(tst + width - radius, y + height);
    this.arc(tst + width - radius, y + height - radius, radius, quarterradians, 0, true);
    this.lineTo(tst + width, y + radius);
    this.arc(tst + width - radius, y + radius, radius, 0, -quarterradians, true);
    this.lineTo(tst + radius, y);
    this.fillStyle = barFillColor;
    this.fill();
    this.closePath();
    this.restore();
}
