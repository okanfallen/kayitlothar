"use strict";
const Canvas = require('canvas')
require('canvas-extras');
const Discord = require('discord.js');

/**
 * @param {number} length
 * @returns {string}
 */
function codeGenerator(length) {
    var result           = '';
    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    for ( var i = 0; i < length; i++ ) {
       result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
};

const colors = {
    blue: 4214184,
    darkblue: 262374,
    cyan: 4249302,
    lightblue: 9943016,
    brown: 6167043,
    darkred: 8717059,
    red: 16711680,
    lightred: 12864593,
    orange: 0xf39c12,
    darkorange: 10695680,
    darkyellow: 12229378,
    yellow: 16036864,
    lightyellow: 14805006,
    beige: 14913869,
    gold: 8540676,
    green: 1023320,
    darkgreen: 1930500,
    lightgreen: 9492092,
    yellowgreen: 12962816,
    lightpink: 14451962,
    darkpurple: 5046868,
    pink: 13894851,
    silver: 8026489,
    lightgrey: 11579568,
    grey: 3158064,
    black: 0,
    white: 16448250,
    purple: 7997644,
    // DISCORD
    embed: 0x2F3136,
    discord: 0x36393F
};


/**
 * @param {string} date
 * @param {"fr" | "en"} lang
 */
function toStringDate (date, lang="fr") {
    if(typeof date !== "string") return false;
    
    var days = date.includes("d") ? date.split("d")[0] : "";
    var hours = date.includes("h") ? date.split("h")[0].slice(days ? days.length + 1 : 0) : "";
    var minutes = date.includes("m") ? date.split("m")[0].slice(days ? days.length + 1 : 0).slice(hours ? hours.length + 1 : 0) : "";
    var seconds = date.includes("s") ? date.split("s")[0].slice(days ? days.length + 1 : 0).slice(hours ? hours.length + 1 : 0).slice(minutes ? minutes.length + 1 : 0) : "";
    
    if(days.length <= 0 && hours.length <= 0 && minutes.length <= 0 && seconds.length <= 0) return null;
    
    var time = [];
    if(lang == "fr") {
        if(days.length > 0) time.push(days <= 1 ? `${days} jour` : `${days} jours`);
        if(hours.length > 0) time.push(hours <= 1 ? `${hours} heure` : `${hours} heures`);
        if(minutes.length > 0) time.push(minutes <= 1 ? `${minutes} minute` : `${minutes} minutes`);
        if(seconds.length > 0) time.push(seconds <= 1 ? `${seconds} seconde` : `${seconds} secondes`);
    } else if(lang == "en") {
        if(days.length > 0) time.push(days <= 1 ? `${days} day` : `${days} days`);
        if(hours.length > 0) time.push(hours <= 1 ? `${hours} hour` : `${hours} hours`);
        if(minutes.length > 0) time.push(minutes <= 1 ? `${minutes} minute` : `${minutes} minutes`);
        if(seconds.length > 0) time.push(seconds <= 1 ? `${seconds} second` : `${seconds} seconds`);
    };
    return time.join(", ");
};
/**
 * @param {string} date
 */
function toIntDate (date) {
    if(typeof date !== "string") return false;

    var days = date.includes("d") ? date.split("d")[0] : "";
    var hours = date.includes("h") ? date.split("h")[0].slice(days ? days.length + 1 : 0) : "";
    var minutes = date.includes("m") ? date.split("m")[0].slice(days ? days.length + 1 : 0).slice(hours ? hours.length + 1 : 0) : "";
    var seconds = date.includes("s") ? date.split("s")[0].slice(days ? days.length + 1 : 0).slice(hours ? hours.length + 1 : 0).slice(minutes ? minutes.length + 1 : 0) : "";
    
    var duration = 0;
    if(days.length > 0) duration += parseInt(days) * 86400000;
    if(hours.length > 0) duration += parseInt(hours) * 3600000;
    if(minutes.length > 0) duration += parseInt(minutes) * 60000;
    if(seconds.length > 0) duration += parseInt(seconds) * 1000;

    return duration;
};

/**
 * @param {string} timestamp
 * @param {"fr" | "en"} lang
 */
function fromIntToDate (timestamp, lang="fr") {
    var time = [];
    var days = Math.floor(timestamp / (1000 * 60 * 60 * 24));
    var hours = Math.floor((timestamp % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    var minutes = Math.floor((timestamp % (1000 * 60 * 60)) / (1000 * 60));
    var seconds = Math.floor((timestamp % (1000 * 60)) / 1000);

    if(lang == "fr") {
        if(days > 0) time.push(`${days} jour` + (days > 1 ? "s" : ""));
        if(hours > 0) time.push(`${hours} heure` + (hours > 1 ? "s" : ""));
        if(minutes > 0) time.push(`${minutes} minute` + (minutes > 1 ? "s" : ""));
        if(seconds > 0) time.push(`${seconds} seconde` + (seconds > 1 ? "s" : ""));
    } else if(lang == "en") {
        if(days > 0) time.push(`${days} days` + (days > 1 ? "s" : ""));
        if(hours > 0) time.push(`${hours} hours` + (hours > 1 ? "s" : ""));
        if(minutes > 0) time.push(`${minutes} minutes` + (minutes > 1 ? "s" : ""));
        if(seconds > 0) time.push(`${seconds} seconds` + (seconds > 1 ? "s" : ""));
    }
    return time.join(", ");
};


async function rankCardGenerator(emFill, barFill, level, currXP, nextLevelXP, member) {
    const canvas = Canvas.createCanvas(700, 250);
    const ctx = canvas.getContext('2d');
    const background = await Canvas.loadImage('./background.png');
    ctx.drawImage(background, 0, 0, canvas.width, canvas.height);
    ctx.font = '50px sans-serif';
    ctx.fillStyle = '#FF0000';
    ctx.fillText(member.nickname || member.user.username, 250, 130, 400);
    if (!emFill) emFill = 'black';
    if (!barFill) barFill = 'white';
    ctx.beginPath();
    ctx.progressBar(currXP, nextLevelXP, 250, 150, 400, emFill, barFill);
    ctx.closePath();
    ctx.font = '50px sans-serif';
    ctx.fillStyle = 'ff0000';
    ctx.fillText(`Level: ${level}`, 500, 50);
    ctx.font = '35px sans-serif';
    ctx.fillStyle = 'ffffff';
    ctx.fillText(`XP: ${currXP}/${nextLevelXP.toFixed(2)}`, 350, 182.5, 375);
    ctx.strokeRect(0, 0, canvas.width, canvas.height);
    ctx.beginPath();
    ctx.arc(125, 125, 100, 0, Math.PI * 2, true);
    ctx.closePath();
    ctx.clip();
    const avatar = await Canvas.loadImage(member.user.displayAvatarURL({ format: 'jpg' }));
    ctx.drawImage(avatar, 25, 25, 200, 200);
    const card = new Discord.MessageAttachment(canvas.toBuffer(), 'rank-card.png');
    return card;
}

module.exports = {
    codeGenerator, rankCardGenerator, colors, toStringDate,
    toIntDate, fromIntToDate
}